version: '2.4'

services:

  config-server:
    build:
      context: config-server
    image: com/cargo/booking/config-server:0.1
    networks:
      - cargo-booking-network
    ports:
      - "8082:8082"
    restart: always

  discovery-server:
    build:
      context: discovery-server
    depends_on:
      - config-server
    image: com/cargo/booking/discovery-server:0.1
    networks:
      - cargo-booking-network
    ports:
      - "8761:8761"
    restart: always

  calculate-service:
    build:
      context: calculate-service
    depends_on:
      - config-server
      - db
      - discovery-server
    environment:
      ACTIVE_PROFILES: docker
      CONFIG_SERVER_HOST: config-server
    image: com/cargo/booking/calculate-service:0.1
    networks:
      - cargo-network
    restart: always

  internal-api-gateway:
    build:
      context: internal-api-gateway
    depends_on:
      - config-server
      - discovery-server
    environment:
      ACTIVE_PROFILES: docker
      CONFIG_SERVER_HOST: config-server
    image: com/cargo/booking/internal-api-gateway:0.1
    networks:
      - cargo-network
    ports:
      - "9001:9001"
    restart: always

  api-gateway:
    build:
      context: api-gateway
    depends_on:
      - config-server
      - discovery-server
    environment:
      ACTIVE_PROFILES: docker
      CONFIG_SERVER_HOST: config-server
    image: com/cargo/booking/api-gateway:0.1
    networks:
      - cargo-network
    ports:
      - "8081:8081"
    restart: always
    
  nsi-service:
    build:
      context: nsi-service
    depends_on:
      - config-server
      - db
      - discovery-server
    environment:
      ACTIVE_PROFILES: docker
      CONFIG_SERVER_HOST: config-server
    image: com/cargo/booking/nsi-service:0.1
    networks:
      - cargo-network
    restart: always

  account-service:
    build:
      context: account-service
    depends_on:
      - config-server
      - db
      - discovery-server
    environment:
      ACTIVE_PROFILES: docker
      CONFIG_SERVER_HOST: config-server
    image: com/cargo/booking/account-service:0.1
    networks:
      - cargo-network
    restart: always

  auth-server:
    build:
      context: auth-server
    depends_on:
      - config-server
      - db
      - discovery-server
    environment:
      ACTIVE_PROFILES: docker
      CONFIG_SERVER_HOST: config-server
    image: com/cargo/booking/auth-server:0.1
    networks:
      - cargo-network
    restart: always

  claim-service:
    build:
      context: claim-service
    depends_on:
      - config-server
      - db
      - discovery-server
      - minio
    environment:
      ACTIVE_PROFILES: docker
      CONFIG_SERVER_HOST: config-server
    image: com/cargo/booking/claim-service:0.1
    networks:
      - cargo-network
    restart: always

  db:
    build:
      context: database
    image: com/cargo/booking/pg-sql-server:0.1
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    environment:
      POSTGRES_PASSWORD: 'postgres'
      PG_DATABASE: cargo
      PG_USER: cargo
      PG_PASSWORD: 'postgres'
      PG_TIMEZONE: 'Asia/Yekaterinburg'
    networks:
      - cargo-booking-network
    restart: always

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    ports:
      - 9300:9000
      - 9301:9001
    volumes:
      - minio_data:/data
    networks:
      - cargo-network
    restart: always

  zookeeper:
    image: bitnami/zookeeper:3.7
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    networks:
      - cargo-network
    restart: always

  kafka:
    image: bitnami/kafka:3.1.0
    depends_on:
      - zookeeper
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    ports:
      - "9093:9093"
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - cargo-network
    restart: always


networks:
  cargo-booking-network:
    driver: bridge

volumes:
  db_data:
  minio_data:
  zookeeper_data:
  kafka_data:

